[
  {
    "component": "AppButton",
    "name": "Button",
    "files": [
      {
        "name": "AppButton.vue",
        "dir": "./src/components/app/button",
        "placementDir": "app/button",
        "type": "components",
        "content": "<script setup lang=\"ts\">\r\nimport { twMerge } from 'tailwind-merge'\r\nimport { buttonVariants } from '@/components/app/button/appButtonVariants'\r\nimport type { ButtonProps } from '@/components/app/button/appButtonVariants'\r\nimport type { Icon } from '@/icons'\r\n\r\ninterface Props {\r\n  isDisabled?: boolean\r\n  isLoading?: boolean\r\n  isRounded?: boolean\r\n  variant?: ButtonProps['variant']\r\n  size?: ButtonProps['size']\r\n  prefixIcon?: Icon\r\n  suffixIcon?: Icon\r\n}\r\n\r\nconst {\r\n  variant = 'default',\r\n  size = 'default',\r\n  isDisabled = false,\r\n  isLoading = false,\r\n  prefixIcon,\r\n  suffixIcon,\r\n} = defineProps<Props>()\r\n\r\nconst emits = defineEmits(['component:click'])\r\n\r\nconst handleClick = (): void => {\r\n  if (!isDisabled && !isLoading)\r\n    emits('component:click')\r\n}\r\n</script>\r\n\r\n<template>\r\n  <button :class=\"twMerge(buttonVariants({ variant, size, isRounded }))\" @click=\"handleClick\">\r\n    <div :class=\"{ 'opacity-30': isLoading }\" class=\"flex items-center gap-2 whitespace-nowrap transition-opacity\">\r\n      <slot name=\"prefix\">\r\n        <AppIcon v-if=\"prefixIcon\" :icon=\"prefixIcon\" />\r\n      </slot>\r\n      <slot />\r\n      <slot name=\"suffix\">\r\n        <AppIcon v-if=\"suffixIcon\" :icon=\"suffixIcon\" />\r\n      </slot>\r\n    </div>\r\n    <AppButtonLoader :is-loading=\"isLoading\" />\r\n  </button>\r\n</template>\r\n"
      },
      {
        "name": "appButtonVariants.ts",
        "dir": "./src/components/app/button",
        "placementDir": "app/button",
        "type": "components",
        "content": "import type { VariantProps } from 'class-variance-authority'\r\nimport { cva } from 'class-variance-authority'\r\n\r\nexport const variantOptions = {\r\n  default: 'bg-primary text-primary-foreground hover:bg-primary/90',\r\n  destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-focus-destructive',\r\n  outline: 'border border-primary hover:bg-secondary text-secondary-foreground',\r\n  secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\r\n  ghost: 'hover:bg-secondary text-secondary-foreground',\r\n  link: 'text-primary underline-offset-4 hover:underline',\r\n}\r\n\r\nexport const sizeOptions = {\r\n  icon: 'h-10 p-3 w-10',\r\n  default: 'h-10 px-4 py-2',\r\n  sm: 'h-9 rounded px-3',\r\n  lg: 'h-11 rounded px-8',\r\n}\r\n\r\nexport const loaderVariantOptions = {\r\n  white: 'bg-white',\r\n  primary: 'bg-primary',\r\n}\r\n\r\nexport const buttonVariants = cva(\r\n  'relative inline-flex items-center justify-center rounded text-subtext font-medium text-destructive-foreground transition-colors disabled:pointer-events-none disabled:opacity-50',\r\n  {\r\n    variants: {\r\n      variant: variantOptions,\r\n      size: sizeOptions,\r\n      isRounded: {\r\n        true: 'rounded-full',\r\n        false: '',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  },\r\n)\r\n\r\nexport type ButtonProps = VariantProps<typeof buttonVariants>\r\n\r\nexport const buttonVariantOptions = Object.keys(variantOptions)\r\nexport const buttonSizeOptions = Object.keys(sizeOptions)\r\n"
      },
      {
        "name": "AppButtonLoader.vue",
        "dir": "./src/components/app/button",
        "placementDir": "app/button",
        "type": "components",
        "content": "<script setup lang=\"ts\">\r\nimport { fadeTransition } from '@/transitions'\r\n\r\ninterface Props {\r\n  isLoading: boolean\r\n}\r\nconst {\r\n  isLoading,\r\n} = defineProps<Props>()\r\n</script>\r\n\r\n<template>\r\n  <!-- eslint-disable tailwindcss/no-custom-classname -->\r\n  <Transition v-bind=\"fadeTransition\">\r\n    <div v-if=\"isLoading\" class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\">\r\n      <div class=\"relative inline-block h-2.5 w-10\">\r\n        <div\r\n          v-for=\"i in 4\" :key=\"i\" class=\"orb bg-current shadow-focus absolute top-[1px] h-2 w-2 rounded-full\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </Transition>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n.orb:nth-child(1) {\r\n  left: 4px;\r\n  animation: lds-ellipsis1 0.6s infinite;\r\n}\r\n\r\n.orb:nth-child(2) {\r\n  left: 4px;\r\n  animation: lds-ellipsis2 0.6s infinite;\r\n}\r\n\r\n.orb:nth-child(3) {\r\n  left: 16px;\r\n  animation: lds-ellipsis2 0.6s infinite;\r\n}\r\n\r\n.orb:nth-child(4) {\r\n  left: 28px;\r\n  animation: lds-ellipsis3 0.6s infinite;\r\n}\r\n\r\n@keyframes lds-ellipsis1 {\r\n  0% {\r\n    transform: scale(0);\r\n  }\r\n\r\n  100% {\r\n    transform: scale(1);\r\n  }\r\n}\r\n\r\n@keyframes lds-ellipsis3 {\r\n  0% {\r\n    transform: scale(1);\r\n  }\r\n\r\n  100% {\r\n    transform: scale(0);\r\n  }\r\n}\r\n\r\n@keyframes lds-ellipsis2 {\r\n  0% {\r\n    transform: translate(0, 0);\r\n  }\r\n\r\n  100% {\r\n    transform: translate(12px, 0);\r\n  }\r\n}\r\n</style>\r\n"
      }
    ],
    "internalDependencies": [],
    "dependencies": [
      "class-variance-authority"
    ]
  },
  {
    "component": "AppCard",
    "name": "Card",
    "files": [
      {
        "name": "AppCard.vue",
        "dir": "./src/components/app/card",
        "placementDir": "app/card",
        "type": "components",
        "content": "<script setup lang=\"ts\">\r\ninterface Props {\r\n  content?: string\r\n  title?: string\r\n  subtitle?: string\r\n  footer?: string\r\n  headerImage?: string\r\n}\r\n\r\ndefineProps<Props>()\r\n\r\ndefineSlots<{\r\n  content?: () => any\r\n  header?: () => any\r\n  default?: () => any\r\n  footer?: () => any\r\n  headerImage?: () => any\r\n}>()\r\n</script>\r\n\r\n<template>\r\n  <section\r\n    class=\"\r\n    flex flex-col overflow-hidden\r\n    rounded-card border bg-card\r\n    text-card-foreground shadow-card-shadow\r\n    transition-shadow duration-300\r\n    hover:shadow-card-hover-shadow\r\n    focus:shadow-card-hover-shadow\"\r\n  >\r\n    <slot>\r\n      <slot name=\"headerImage\">\r\n        <img\r\n          v-if=\"headerImage\"\r\n          :src=\"headerImage\"\r\n          class=\"h-48 w-full object-cover\"\r\n        >\r\n      </slot>\r\n      <div class=\"flex flex-col gap-4 p-4\">\r\n        <slot name=\"header\">\r\n          <div v-if=\"title || subtitle\">\r\n            <AppText\r\n              v-if=\"title\"\r\n              boldness=\"semibold\"\r\n              variant=\"heading\"\r\n            >\r\n              {{ title }}\r\n            </AppText>\r\n            <AppText\r\n              v-if=\"subtitle\"\r\n              class=\"text-muted-foreground\"\r\n            >\r\n              {{ subtitle }}\r\n            </AppText>\r\n          </div>\r\n        </slot>\r\n        <slot name=\"content\">\r\n          <AppText v-if=\"content\">\r\n            {{ content }}\r\n          </AppText>\r\n        </slot>\r\n        <slot name=\"footer\">\r\n          <AppText v-if=\"footer\">\r\n            {{ footer }}\r\n          </AppText>\r\n        </slot>\r\n      </div>\r\n    </slot>\r\n  </section>\r\n</template>\r\n"
      }
    ],
    "internalDependencies": [],
    "dependencies": []
  },
  {
    "component": "FormError",
    "name": "FormError",
    "files": [
      {
        "name": "FormError.vue",
        "dir": "./src/components/form/error",
        "placementDir": "form/errors",
        "type": "components",
        "content": "<script setup lang=\"ts\">\r\ninterface Props {\r\n  errorMessage?: string\r\n}\r\nconst { errorMessage } = defineProps<Props>()\r\n</script>\r\n\r\n<template>\r\n  <p class=\"text-subtext text-destructive\">\r\n    <slot>\r\n      {{ errorMessage }}\r\n    </slot>\r\n  </p>\r\n</template>\r\n"
      }
    ]
  },
  {
    "component": "FormInputField",
    "name": "FormInputField",
    "files": [
      {
        "name": "FormInputField.vue",
        "dir": "./src/components/form/field",
        "placementDir": "form/field",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"TModel extends string | number | undefined\">\r\nimport { twMerge } from 'tailwind-merge'\r\nimport { useClipboard } from '@vueuse/core'\r\nimport type { InputFieldProps } from '@/components/form/field/formInputFieldVariants'\r\nimport { inputFieldExtraContentVariants, inputFieldVariants } from '@/components/form/field/formInputFieldVariants'\r\nimport { generateUuid } from '@/utils/uuid/generateUuid'\r\nimport { useFormInputGroup } from '@/composables/form/group/useFormInputGroup'\r\nimport type { Icon } from '@/icons'\r\n\r\ninterface Props {\r\n  isSuccess?: boolean\r\n  isReadOnly?: boolean\r\n  isDisabled?: boolean\r\n  isTouched?: boolean\r\n  isDirty?: boolean\r\n  isCopyable?: boolean\r\n  isOptional?: boolean\r\n  hasExtraContentBorder?: boolean\r\n  placeholder?: string\r\n  type?: TModel extends number ? 'number' : 'text' | 'password' | 'email' | 'tel' | 'url' | 'search'\r\n  label?: string\r\n  errors?: { _errors: string[] }\r\n  backContent?: string\r\n  frontContent?: string\r\n  backIcon?: Icon\r\n  frontIcon?: Icon\r\n}\r\n\r\nconst {\r\n  isSuccess = false,\r\n  isReadOnly = false,\r\n  isDisabled = false,\r\n  isTouched = false,\r\n  isDirty = false,\r\n  isCopyable = false,\r\n  placeholder,\r\n  backContent,\r\n  frontContent,\r\n  backIcon,\r\n  frontIcon,\r\n  label,\r\n  errors = { _errors: [] },\r\n  type = 'text',\r\n} = defineProps<Props>()\r\n\r\nconst emits = defineEmits<{\r\n  blur: []\r\n}>()\r\n\r\nconst model = defineModel<TModel>()\r\nconst uuid = generateUuid()\r\nconst element = ref<HTMLElement>()\r\n\r\nconst slots = defineSlots<{\r\n  label?: (props: {}) => any\r\n  'front-content'?: (props: {}) => any\r\n  'back-content'?: (props: {}) => any\r\n}>()\r\n\r\nconst errorShown = computed(() => errors._errors.length > 0 && (isTouched || isDirty))\r\n\r\n// Extra content logic\r\nconst hasFrontContent = computed(() => frontContent || slots['front-content'] || frontIcon)\r\nconst hasBackContent = computed(() => backContent || slots['back-content'] || backIcon || isCopyable || type === 'password')\r\nconst currentExtraContent = computed<InputFieldProps['extraContent']>(() => {\r\n  if (hasFrontContent.value && hasBackContent.value)\r\n    return 'both'\r\n  if (hasFrontContent.value)\r\n    return 'front'\r\n  if (hasBackContent.value)\r\n    return 'back'\r\n  return 'default'\r\n})\r\n\r\n// Input status logic\r\nconst currentStatus = computed<InputFieldProps['status']>(() => {\r\n  if (errorShown.value)\r\n    return 'error'\r\n  if (isSuccess)\r\n    return 'success'\r\n  if (isReadOnly)\r\n    return 'readonly'\r\n  if (isDisabled)\r\n    return 'disabled'\r\n  return 'default'\r\n})\r\n\r\n// Copy logic\r\nconst copyModel = computed(() => model.value?.toString() ?? '')\r\nconst { copy } = useClipboard()\r\n\r\n// Adds grouping logic if a wrapped in FormGroup component\r\nif (type === 'number')\r\n  useFormInputGroup({ model: model as Ref<number>, element, uuid, isDisabled: computed(() => isDisabled) })\r\n\r\n// Password logic\r\nconst passwordShown = ref(false)\r\nconst togglePasswordShown = (): void => {\r\n  passwordShown.value = !passwordShown.value\r\n}\r\nconst inputType = computed<string>(() => (type === 'password' && passwordShown.value) ? 'text' : type)\r\n</script>\r\n\r\n<template>\r\n  <div ref=\"element\">\r\n    <!-- Label -->\r\n    <div class=\"flex items-center justify-between gap-4\">\r\n      <FormLabel :for=\"uuid\">\r\n        <slot name=\"label\">\r\n          {{ label }}\r\n        </slot>\r\n      </FormLabel>\r\n      <p v-if=\"isOptional\" class=\"text-caption text-muted-foreground\">\r\n        Optional\r\n      </p>\r\n    </div>\r\n\r\n    <div class=\"flex\">\r\n      <!-- Content before the input -->\r\n      <div\r\n        v-if=\"hasFrontContent\" :class=\"\r\n          twMerge(inputFieldExtraContentVariants(\r\n            {\r\n              extraContentType: 'front',\r\n              status: currentStatus,\r\n              extraContentBorder: hasExtraContentBorder,\r\n            },\r\n          ))\"\r\n      >\r\n        <slot name=\"front-content\">\r\n          <AppIcon v-if=\"frontIcon\" :icon=\"frontIcon\" />\r\n          <div v-else-if=\"frontContent\">\r\n            {{ frontContent }}\r\n          </div>\r\n        </slot>\r\n      </div>\r\n\r\n      <!-- Input -->\r\n      <input\r\n        :id=\"uuid\" v-model=\"model\" :disabled=\"isDisabled\" :type=\"inputType\" min=\"0\"\r\n        :class=\"twMerge(inputFieldVariants({ status: currentStatus, extraContent: currentExtraContent }))\"\r\n        :placeholder=\"placeholder\" :readonly=\"isReadOnly\" @blur=\"emits('blur')\"\r\n      >\r\n\r\n      <!-- Content after the input -->\r\n      <div\r\n        v-if=\"hasBackContent\" :class=\"\r\n          twMerge(inputFieldExtraContentVariants(\r\n            {\r\n              extraContentType: 'back',\r\n              status: currentStatus,\r\n              extraContentBorder: hasExtraContentBorder,\r\n            },\r\n          ))\"\r\n      >\r\n        <slot name=\"back-content\">\r\n          <button v-if=\"type === 'password'\" @click=\"togglePasswordShown\">\r\n            <AppIcon v-if=\"passwordShown\" icon=\"eyeClosed\" />\r\n            <AppIcon v-else icon=\"eyeOpen\" />\r\n          </button>\r\n          <button v-else-if=\"isCopyable\" @click=\"copy(copyModel)\">\r\n            Copy\r\n          </button>\r\n          <AppIcon v-else-if=\"backIcon\" :icon=\"backIcon\" />\r\n          <div v-else-if=\"backContent\">\r\n            {{ backContent }}\r\n          </div>\r\n        </slot>\r\n      </div>\r\n    </div>\r\n    <!-- Error -->\r\n    <TransitionExpand :duration=\"0.2\">\r\n      <FormError v-if=\"errorShown\" :error-message=\"errors._errors[0]\" />\r\n    </TransitionExpand>\r\n  </div>\r\n</template>\r\n@/utils/uuid/generateUuid\r\n"
      },
      {
        "name": "formInputFieldVariants.ts",
        "dir": "./src/components/form/field",
        "placementDir": "form/field",
        "type": "components",
        "content": "import type { VariantProps } from 'class-variance-authority'\r\nimport { cva } from 'class-variance-authority'\r\n\r\nexport const statusOptions = {\r\n  default: 'border-border',\r\n  error: 'border-destructive',\r\n  success: 'border-success',\r\n  readonly: 'bg-muted text-muted-foreground',\r\n  disabled: 'opacity-60',\r\n}\r\n\r\nexport const extraContentOptions = {\r\n  default: '',\r\n  back: 'rounded-r-none border-r-0',\r\n  front: 'rounded-l-none border-l-0',\r\n  both: 'rounded-l-none border-l-0 rounded-r-none border-r-0',\r\n}\r\n\r\nexport const inputFieldVariants = cva(\r\n  'relative w-full rounded border border-border bg-input px-4 py-2 placeholder:transition-all placeholder:duration-300 focus:placeholder:translate-x-1 focus:placeholder:opacity-0',\r\n  {\r\n    variants: {\r\n      status: statusOptions,\r\n      extraContent: extraContentOptions,\r\n    },\r\n    defaultVariants: {\r\n      status: 'default',\r\n      extraContent: 'default',\r\n    },\r\n  },\r\n)\r\n\r\nexport const extraContentTypes = {\r\n  back: 'rounded-l-none border-l-0',\r\n  front: 'rounded-r-none border-r-0',\r\n}\r\n\r\nexport const extraContentBorderOptions = {\r\n  true: '',\r\n  false: '',\r\n}\r\n\r\nexport const inputFieldExtraContentVariants = cva(\r\n  'flex items-center justify-center rounded border border-border bg-input px-4',\r\n  {\r\n    variants: {\r\n      status: statusOptions,\r\n      extraContentType: extraContentTypes,\r\n      extraContentBorder: extraContentBorderOptions,\r\n    },\r\n    compoundVariants: [\r\n      {\r\n        extraContentBorder: true,\r\n        extraContentType: 'front',\r\n        class: 'border-r',\r\n      },\r\n      {\r\n        extraContentBorder: true,\r\n        extraContentType: 'back',\r\n        class: 'border-l',\r\n      },\r\n    ],\r\n    defaultVariants: {\r\n      extraContentType: 'back',\r\n    },\r\n  },\r\n)\r\n\r\nexport type InputFieldProps = VariantProps<typeof inputFieldVariants>\r\nexport const inputFieldStatusOptions = Object.keys(statusOptions)\r\n"
      }
    ],
    "internalDependencies": [
      "FormError",
      "FormInputGroupComposable",
      "TransitionExpand",
      "UtilsGenerateUuid"
    ],
    "dependencies": [
      "@vueuse/core"
    ]
  },
  {
    "component": "FormInputGroupComposable",
    "name": "FormInputGroupComposable",
    "files": [
      {
        "name": "useFormInputGroup.ts",
        "dir": "./src/composables/form/group",
        "placementDir": "form/group",
        "type": "composables",
        "content": "import { useFormInputGroupContext } from '@/composables/form/group/useFormInputGroupContext'\r\nimport type { Option } from '@/composables/form/group/useFormInputGroupContext'\r\n\r\nexport interface UseFormInputGroupParams {\r\n  model: Ref<number | null>\r\n  isDisabled?: Ref<boolean>\r\n  uuid: string\r\n  element: Ref<HTMLElement | undefined>\r\n}\r\n\r\nexport const useFormInputGroup = ({ model, uuid, isDisabled, element }: UseFormInputGroupParams): void => {\r\n  const context = useFormInputGroupContext()\r\n  const propsRef = computed(() => ({\r\n    value: typeof model.value === 'number' ? model.value : 0,\r\n    disabled: isDisabled?.value,\r\n  }))\r\n  const option: Option = ref({ id: uuid, element: element.value, propsRef: propsRef.value }) as Option\r\n\r\n  const change = (value: number): void => {\r\n    if (isDisabled?.value || !context)\r\n      return\r\n\r\n    const newValue = context.change(option, value)\r\n    model.value = newValue\r\n  }\r\n\r\n  watch(\r\n    () => model.value, (value) => {\r\n      if (!value)\r\n        return\r\n      change(value)\r\n    },\r\n  )\r\n\r\n  onMounted(() => {\r\n    if (context)\r\n      context.registerOption(option)\r\n  })\r\n  onUnmounted(() => {\r\n    if (context)\r\n      context.unregisterOption(uuid)\r\n  })\r\n}\r\n"
      },
      {
        "name": "useFormInputGroupContext.ts",
        "dir": "./src/composables/form/group",
        "placementDir": "form/group",
        "type": "composables",
        "content": "import { inject } from 'vue'\r\nimport type { ComputedRef, InjectionKey, Ref } from 'vue'\r\n\r\nexport type Option = Ref<{ id: string; element: HTMLElement | undefined; propsRef: { value: number; disabled: boolean } }>\r\n\r\nexport interface FormInputGroupStateDefinition {\r\n  // State\r\n  valueMeasurement?: ComputedRef<string>\r\n  percentProgress?: ComputedRef<boolean>\r\n  valueProgress?: ComputedRef<boolean>\r\n  maxLabel?: ComputedRef<boolean>\r\n\r\n  options: Ref<Option[]>\r\n  maxValue: ComputedRef<number | undefined>\r\n  valueUsed: ComputedRef<number>\r\n\r\n  disabled: Ref<boolean>\r\n  change(option: Option, newValue: number): number | null\r\n  registerOption(action: Option): void\r\n  unregisterOption(id: string): void\r\n}\r\n\r\nexport const FormInputGroupContext = Symbol('FormGroupContext') as InjectionKey<FormInputGroupStateDefinition>\r\n\r\nexport const useFormInputGroupContext = (): FormInputGroupStateDefinition | null => {\r\n  const context = inject(FormInputGroupContext, null)\r\n  return context\r\n}\r\n"
      }
    ]
  },
  {
    "component": "UtilsGenerateUuid",
    "name": "GenerateUuid",
    "files": [
      {
        "name": "generateUuid.ts",
        "dir": "./src/utils/uuid",
        "placementDir": "uuid",
        "type": "utils",
        "content": "export function generateUuid(): string { // Public Domain/MIT\r\n  let d = new Date().getTime()// Timestamp\r\n  let d2 = ((typeof performance !== 'undefined') && performance.now && (performance.now() * 1000)) || 0// Time in microseconds since page-load or 0 if unsupported\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n    let r = Math.random() * 16// random number between 0 and 16\r\n    if (d > 0) { // Use timestamp until depleted\r\n      r = (d + r) % 16 | 0\r\n      d = Math.floor(d / 16)\r\n    }\r\n    else { // Use microseconds since page-load if supported\r\n      r = (d2 + r) % 16 | 0\r\n      d2 = Math.floor(d2 / 16)\r\n    }\r\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16)\r\n  })\r\n}\r\n"
      }
    ]
  },
  {
    "component": "AppModal",
    "name": "Modal",
    "files": [
      {
        "name": "AppModal.vue",
        "dir": "./src/components/app/modal",
        "placementDir": "app/modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\r\nimport {\r\n  Dialog,\r\n  DialogPanel,\r\n  DialogTitle,\r\n  TransitionChild,\r\n  TransitionRoot,\r\n} from '@headlessui/vue'\r\nimport { twMerge } from 'tailwind-merge'\r\nimport type { ModalProps } from '@/components/app/modal/appModalVariants'\r\nimport { modalVariants } from '@/components/app/modal/appModalVariants'\r\nimport type { Icon } from '@/icons'\r\n\r\ninterface Props {\r\n  hasNoCloseButton?: boolean\r\n  hasNoCloseOutside?: boolean\r\n  size?: ModalProps['size']\r\n  title?: string\r\n  icon?: Icon\r\n}\r\n\r\nconst {\r\n  hasNoCloseButton = false,\r\n  hasNoCloseOutside = false,\r\n  size = 'default',\r\n} = defineProps<Props>()\r\n\r\nconst isOpen = defineModel<boolean>('isOpen', {\r\n  required: true,\r\n})\r\n\r\nconst handleClickOutside = (): void => {\r\n  if (!hasNoCloseOutside)\r\n    isOpen.value = false\r\n}\r\n\r\nconst handleClickCloseButton = (): void => {\r\n  if (!hasNoCloseButton)\r\n    isOpen.value = false\r\n}\r\n</script>\r\n\r\n<template>\r\n  <TransitionRoot appear :show=\"isOpen\" as=\"template\">\r\n    <Dialog as=\"div\" class=\"relative z-[999]\" @close=\"handleClickOutside\">\r\n      <TransitionChild\r\n        as=\"template\"\r\n        class=\"ease-[cubic-bezier(.8,_.16,_0,_1.3)]\"\r\n        enter=\"duration-300 ease-out \"\r\n        enter-from=\"opacity-0\"\r\n        enter-to=\"opacity-100\"\r\n        leave=\"duration-200 ease-in\"\r\n        leave-from=\"opacity-100\"\r\n        leave-to=\"opacity-0\"\r\n      >\r\n        <div class=\"fixed inset-0 bg-black/25\" />\r\n      </TransitionChild>\r\n\r\n      <div class=\"fixed inset-0 flex min-h-full items-center justify-center overflow-y-auto p-4\">\r\n        <TransitionChild\r\n          as=\"template\"\r\n          class=\"ease-[cubic-bezier(.8,_.16,_0,_1.3)]\"\r\n          enter=\"duration-300 ease-out \"\r\n          enter-from=\"opacity-0 scale-0\"\r\n          enter-to=\"opacity-100 scale-100\"\r\n          leave=\"duration-200 ease-in\"\r\n          leave-from=\"opacity-100 scale-100\"\r\n          leave-to=\"opacity-0 scale-0\"\r\n        >\r\n          <DialogPanel :class=\"twMerge(modalVariants({ size }))\">\r\n            <div class=\"flex justify-between gap-4\">\r\n              <DialogTitle class=\"flex flex-col items-start justify-start gap-8\">\r\n                <slot name=\"icon\">\r\n                  <AppButton v-if=\"icon\" :front-icon=\"icon\" size=\"icon\" variant=\"outline\" is-rounded />\r\n                </slot>\r\n                <slot name=\"title\">\r\n                  <AppText variant=\"heading\">\r\n                    {{ title }}\r\n                  </AppText>\r\n                </slot>\r\n              </DialogTitle>\r\n              <button class=\"flex \">\r\n                <AppIcon v-if=\"!hasNoCloseButton\" icon=\"close\" @click=\"handleClickCloseButton\" />\r\n              </button>\r\n            </div>\r\n\r\n            <div>\r\n              <slot name=\"content\" />\r\n            </div>\r\n\r\n            <div class=\"mt-4\">\r\n              <slot name=\"footer\" />\r\n            </div>\r\n          </DialogPanel>\r\n        </TransitionChild>\r\n      </div>\r\n    </Dialog>\r\n  </TransitionRoot>\r\n</template>\r\n"
      },
      {
        "name": "appModalVariants.ts",
        "dir": "./src/components/app/modal",
        "placementDir": "app/modal",
        "type": "components",
        "content": "import type { VariantProps } from 'class-variance-authority'\r\nimport { cva } from 'class-variance-authority'\r\n\r\nexport const sizeOptions = {\r\n  default: 'w-[80ch] ',\r\n  sm: 'w-[60ch]',\r\n  full: 'w-full',\r\n  lg: 'w-[120ch]',\r\n}\r\n\r\nexport const loaderVariantOptions = {\r\n  white: 'bg-white',\r\n  primary: 'bg-primary',\r\n}\r\n\r\nexport const modalVariants = cva(\r\n  'flex flex-col gap-4 rounded-modal bg-white p-6 text-left',\r\n  {\r\n    variants: {\r\n      size: sizeOptions,\r\n    },\r\n    defaultVariants: {\r\n      size: 'default',\r\n    },\r\n  },\r\n)\r\n\r\nexport type ModalProps = VariantProps<typeof modalVariants>\r\nexport const modalSizeOptions = Object.keys(sizeOptions)\r\n"
      }
    ],
    "dependencies": [
      "@headlessui/vue"
    ],
    "internalDependencies": [
      "AppText",
      "AppButton",
      "AppIcon"
    ]
  },
  {
    "component": "AppText",
    "name": "Text",
    "files": [
      {
        "name": "AppText.vue",
        "dir": "./src/components/app/text",
        "placementDir": "app/text",
        "type": "components",
        "content": "<script setup lang=\"ts\">\r\nimport { twMerge } from 'tailwind-merge'\r\nimport { textVariants } from '@/components/app/text/appTextVariants'\r\nimport type { TextProps } from '@/components/app/text/appTextVariants'\r\n\r\ntype TextType = 'p' | 'span' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'div' | 'blockquote'\r\n\r\ninterface Props {\r\n  variant?: TextProps['variant']\r\n  boldness?: TextProps['boldness']\r\n  numberOfLines?: TextProps['truncate']\r\n  as?: TextType\r\n}\r\n\r\nconst {\r\n  variant = 'p',\r\n  numberOfLines,\r\n  boldness,\r\n  as = 'p',\r\n} = defineProps<Props>()\r\n\r\nconst attrs = useAttrs()\r\n</script>\r\n\r\n<template>\r\n  <Component :is=\"as\" :class=\"twMerge(textVariants({ variant, boldness, truncate: numberOfLines }), attrs?.class as string)\">\r\n    <slot />\r\n  </Component>\r\n</template>\r\n"
      },
      {
        "name": "appTextVariants.ts",
        "dir": "./src/components/app/text",
        "placementDir": "app/text",
        "type": "components",
        "content": "import type { VariantProps } from 'class-variance-authority'\r\nimport { cva } from 'class-variance-authority'\r\n\r\nexport const variantOptions = {\r\n  hero: 'text-hero',\r\n  title: 'text-title',\r\n  subtitle: 'text-subtitle',\r\n  heading: 'text-heading',\r\n  body: 'text-body',\r\n  subtext: 'text-subtext',\r\n  caption: 'text-caption',\r\n}\r\n\r\nexport const boldnessOptions = {\r\n  bold: 'font-bold',\r\n  normal: 'font-normal',\r\n  light: 'font-light',\r\n  thin: 'font-thin',\r\n  extrabold: 'font-extrabold',\r\n  semibold: 'font-semibold',\r\n  none: '',\r\n}\r\n\r\nexport const truncateOptions = {\r\n  1: 'line-clamp-1',\r\n  2: 'line-clamp-2',\r\n  3: 'line-clamp-3',\r\n  4: 'line-clamp-4',\r\n  5: 'line-clamp-5',\r\n  6: 'line-clamp-6',\r\n}\r\n\r\nexport const textVariants = cva(\r\n  '',\r\n  {\r\n    variants: {\r\n      variant: variantOptions,\r\n      boldness: boldnessOptions,\r\n      truncate: truncateOptions,\r\n    },\r\n    defaultVariants: {\r\n      variant: 'body',\r\n      boldness: 'none',\r\n      truncate: undefined,\r\n    },\r\n  },\r\n)\r\n\r\nexport type TextProps = VariantProps<typeof textVariants>\r\n\r\nexport const textVariantOptions = Object.keys(variantOptions)\r\nexport const textBoldnessOptions = Object.keys(boldnessOptions)\r\nexport const textTruncateOptions = Object.keys(truncateOptions)\r\n"
      }
    ],
    "internalDependencies": []
  },
  {
    "component": "TransitionExpand",
    "name": "TransitionExpand",
    "files": [
      {
        "name": "TransitionExpand.vue",
        "dir": "./src/components/app/transitions",
        "placementDir": "transitions",
        "type": "components",
        "content": "<script lang=\"ts\" setup>\r\ninterface Props {\r\n  duration?: number\r\n}\r\n\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  duration: 0.5,\r\n})\r\n\r\nconst durationString = computed(() => `${props.duration}s`)\r\n\r\nconst enter = (element: Element): void => {\r\n  const htmlElement: HTMLElement = element as HTMLElement\r\n  const width = getComputedStyle(htmlElement).width\r\n\r\n  htmlElement.style.width = width\r\n  htmlElement.style.position = 'absolute'\r\n  htmlElement.style.visibility = 'hidden'\r\n  htmlElement.style.height = 'auto'\r\n\r\n  const height = getComputedStyle(htmlElement).height\r\n\r\n  htmlElement.style.width = ''\r\n  htmlElement.style.position = ''\r\n  htmlElement.style.visibility = ''\r\n  htmlElement.style.height = ''\r\n\r\n  getComputedStyle(htmlElement)\r\n\r\n  requestAnimationFrame(() => {\r\n    htmlElement.style.height = height\r\n  })\r\n}\r\n\r\nconst afterEnter = (element: Element): void => {\r\n  const htmlElement: HTMLElement = element as HTMLElement\r\n  htmlElement.style.height = 'auto'\r\n}\r\n\r\nconst leave = (element: Element): void => {\r\n  const htmlElement: HTMLElement = element as HTMLElement\r\n  const height = getComputedStyle(htmlElement).height\r\n\r\n  htmlElement.style.height = height\r\n  getComputedStyle(htmlElement)\r\n\r\n  requestAnimationFrame(() => {\r\n    htmlElement.style.height = '0'\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <transition\r\n    name=\"expand\"\r\n    @after-enter=\"afterEnter\"\r\n    @enter=\"enter\"\r\n    @leave=\"leave\"\r\n  >\r\n    <slot />\r\n  </transition>\r\n</template>\r\n\r\n<style scoped>\r\n.expand-enter-active,\r\n.expand-leave-active {\r\n  transition: height v-bind(durationString) cubic-bezier(0.645, 0.045, 0.355, 1), opacity v-bind(durationString);\r\n  overflow: hidden;\r\n}\r\n\r\n.expand-enter-from,\r\n.expand-leave-to {\r\n  opacity: 0;\r\n  height: 0;\r\n}\r\n\r\n* {\r\n  will-change: height;\r\n  transform: translateZ(0);\r\n  backface-visibility: hidden;\r\n}\r\n</style>\r\n"
      }
    ]
  }
]