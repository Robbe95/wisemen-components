[
  {
    "component": "AppButton",
    "name": "Button",
    "files": [
      {
        "name": "AppButton.vue",
        "dir": "./src/components/app/button",
        "placementDir": "app/button",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { twMerge } from 'tailwind-merge'\nimport { buttonVariants } from '@/components/app/button/appButton.style'\nimport type { ButtonProps } from '@/components/app/button/appButton.style'\nimport type { Icon } from '@/icons'\n\ninterface Props {\n  isDisabled?: boolean\n  isLoading?: boolean\n  isRounded?: boolean\n  variant?: ButtonProps['variant']\n  size?: ButtonProps['size']\n  prefixIcon?: Icon\n  suffixIcon?: Icon\n}\n\nconst {\n  variant = 'default',\n  size = 'default',\n  isDisabled = false,\n  isLoading = false,\n  prefixIcon,\n  suffixIcon,\n} = defineProps<Props>()\n\nconst emits = defineEmits(['component:click'])\n\nconst handleClick = (): void => {\n  if (!isDisabled && !isLoading)\n    emits('component:click')\n}\n</script>\n\n<template>\n  <button :class=\"twMerge(buttonVariants({ variant, size, isRounded }))\" @click=\"handleClick\">\n    <div :class=\"{ 'opacity-30': isLoading }\" class=\"flex items-center gap-2 whitespace-nowrap transition-opacity\">\n      <slot name=\"prefix\">\n        <AppIcon v-if=\"prefixIcon\" :icon=\"prefixIcon\" />\n      </slot>\n      <slot />\n      <slot name=\"suffix\">\n        <AppIcon v-if=\"suffixIcon\" :icon=\"suffixIcon\" />\n      </slot>\n    </div>\n    <AppButtonLoader :is-loading=\"isLoading\" />\n  </button>\n</template>\n"
      },
      {
        "name": "appButton.style.ts",
        "dir": "./src/components/app/button",
        "placementDir": "app/button",
        "type": "components",
        "content": "import type { VariantProps } from 'class-variance-authority'\nimport { cva } from 'class-variance-authority'\n\nexport const variantOptions = {\n  default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n  destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-focus-destructive',\n  outline: 'border border-primary hover:bg-secondary text-secondary-foreground',\n  secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n  ghost: 'hover:bg-secondary text-secondary-foreground',\n  link: 'text-primary underline-offset-4 hover:underline',\n}\n\nexport const sizeOptions = {\n  icon: 'h-10 p-3 w-10',\n  default: 'h-10 px-4 py-2',\n  sm: 'h-9 rounded px-3',\n  lg: 'h-11 rounded px-8',\n}\n\nexport const loaderVariantOptions = {\n  white: 'bg-white',\n  primary: 'bg-primary',\n}\n\nexport const buttonVariants = cva(\n  'relative inline-flex items-center justify-center rounded text-subtext font-medium text-destructive-foreground transition-colors disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: variantOptions,\n      size: sizeOptions,\n      isRounded: {\n        true: 'rounded-full',\n        false: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nexport type ButtonProps = VariantProps<typeof buttonVariants>\n\nexport const buttonVariantOptions = Object.keys(variantOptions)\nexport const buttonSizeOptions = Object.keys(sizeOptions)\n"
      },
      {
        "name": "AppButtonLoader.vue",
        "dir": "./src/components/app/button",
        "placementDir": "app/button",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { fadeTransition } from '@/transitions'\n\ninterface Props {\n  isLoading: boolean\n}\nconst {\n  isLoading,\n} = defineProps<Props>()\n</script>\n\n<template>\n  <!-- eslint-disable tailwindcss/no-custom-classname -->\n  <Transition v-bind=\"fadeTransition\">\n    <div v-if=\"isLoading\" class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\">\n      <div class=\"relative inline-block h-2.5 w-10\">\n        <div\n          v-for=\"i in 4\" :key=\"i\" class=\"orb bg-current shadow-focus absolute top-[1px] h-2 w-2 rounded-full\"\n        />\n      </div>\n    </div>\n  </Transition>\n</template>\n\n<style lang=\"scss\" scoped>\n.orb:nth-child(1) {\n  left: 4px;\n  animation: lds-ellipsis1 0.6s infinite;\n}\n\n.orb:nth-child(2) {\n  left: 4px;\n  animation: lds-ellipsis2 0.6s infinite;\n}\n\n.orb:nth-child(3) {\n  left: 16px;\n  animation: lds-ellipsis2 0.6s infinite;\n}\n\n.orb:nth-child(4) {\n  left: 28px;\n  animation: lds-ellipsis3 0.6s infinite;\n}\n\n@keyframes lds-ellipsis1 {\n  0% {\n    transform: scale(0);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n}\n\n@keyframes lds-ellipsis3 {\n  0% {\n    transform: scale(1);\n  }\n\n  100% {\n    transform: scale(0);\n  }\n}\n\n@keyframes lds-ellipsis2 {\n  0% {\n    transform: translate(0, 0);\n  }\n\n  100% {\n    transform: translate(12px, 0);\n  }\n}\n</style>\n"
      }
    ],
    "internalDependencies": [],
    "dependencies": [
      "class-variance-authority"
    ]
  },
  {
    "component": "FormError",
    "name": "FormError",
    "files": [
      {
        "name": "FormError.vue",
        "dir": "./src/components/form/error",
        "placementDir": "form/errors",
        "type": "components",
        "content": "<script setup lang=\"ts\">\ninterface Props {\n  errorMessage?: string\n}\nconst { errorMessage } = defineProps<Props>()\n</script>\n\n<template>\n  <p class=\"text-subtext text-destructive\">\n    <slot>\n      {{ errorMessage }}\n    </slot>\n  </p>\n</template>\n"
      }
    ]
  },
  {
    "component": "FormInputField",
    "name": "FormInputField",
    "files": [
      {
        "name": "FormInputField.vue",
        "dir": "./src/components/form/field",
        "placementDir": "form/field",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"TModel extends string | number | undefined\">\nimport { twMerge } from 'tailwind-merge'\nimport { useClipboard } from '@vueuse/core'\nimport type { InputFieldProps } from '@/components/form/field/formInputField.style'\nimport { inputFieldExtraContentVariants, inputFieldVariants } from '@/components/form/field/formInputField.style'\nimport { generateUuid } from '@/utils/uuid/generateUuid'\nimport { useFormInputGroup } from '@/composables/form/group/useFormInputGroup'\nimport type { Icon } from '@/icons'\n\ninterface Props {\n  isSuccess?: boolean\n  isReadOnly?: boolean\n  isDisabled?: boolean\n  isTouched?: boolean\n  isDirty?: boolean\n  isCopyable?: boolean\n  isOptional?: boolean\n  hasExtraContentBorder?: boolean\n  placeholder?: string\n  type?: TModel extends number ? 'number' : 'text' | 'password' | 'email' | 'tel' | 'url' | 'search'\n  label?: string\n  errors?: { _errors: string[] }\n  backContent?: string\n  frontContent?: string\n  backIcon?: Icon\n  frontIcon?: Icon\n}\n\nconst {\n  isSuccess = false,\n  isReadOnly = false,\n  isDisabled = false,\n  isTouched = false,\n  isDirty = false,\n  isCopyable = false,\n  placeholder,\n  backContent,\n  frontContent,\n  backIcon,\n  frontIcon,\n  label,\n  errors = { _errors: [] },\n  type = 'text',\n} = defineProps<Props>()\n\nconst emits = defineEmits<{\n  blur: []\n}>()\n\nconst slots = defineSlots<{\n  label?: () => any\n  frontContent?: () => any\n  backContent?: () => any\n}>()\nconst model = defineModel<TModel>()\nconst uuid = generateUuid()\nconst element = ref<HTMLElement>()\n\nconst errorShown = computed(() => errors._errors.length > 0 && (isTouched || isDirty))\n\n// Extra content logic\nconst hasFrontContent = computed(() => frontContent || slots.frontContent || frontIcon)\nconst hasBackContent = computed(() => backContent || slots.backContent || backIcon || isCopyable || type === 'password')\nconst currentExtraContent = computed<InputFieldProps['extraContent']>(() => {\n  if (hasFrontContent.value && hasBackContent.value)\n    return 'both'\n  if (hasFrontContent.value)\n    return 'front'\n  if (hasBackContent.value)\n    return 'back'\n  return 'default'\n})\n\n// Input status logic\nconst currentStatus = computed<InputFieldProps['status']>(() => {\n  if (errorShown.value)\n    return 'error'\n  if (isSuccess)\n    return 'success'\n  if (isReadOnly)\n    return 'readonly'\n  if (isDisabled)\n    return 'disabled'\n  return 'default'\n})\n\n// Copy logic\nconst copyModel = computed(() => model.value?.toString() ?? '')\nconst { copy } = useClipboard()\n\n// Adds grouping logic if a wrapped in FormGroup component\nif (type === 'number')\n  useFormInputGroup({ model: model as Ref<number>, element, uuid, isDisabled: computed(() => isDisabled) })\n\n// Password logic\nconst passwordShown = ref(false)\nconst togglePasswordShown = (): void => {\n  passwordShown.value = !passwordShown.value\n}\nconst inputType = computed<string>(() => (type === 'password' && passwordShown.value) ? 'text' : type)\n</script>\n\n<template>\n  <div ref=\"element\">\n    <!-- Label -->\n    <div class=\"flex items-center justify-between gap-4\">\n      <FormLabel :for=\"uuid\">\n        <slot name=\"label\">\n          {{ label }}\n        </slot>\n      </FormLabel>\n      <p v-if=\"isOptional\" class=\"text-caption text-muted-foreground\">\n        Optional\n      </p>\n    </div>\n\n    <div class=\"flex\">\n      <!-- Content before the input -->\n      <div\n        v-if=\"hasFrontContent\" :class=\"\n          twMerge(inputFieldExtraContentVariants(\n            {\n              extraContentType: 'front',\n              status: currentStatus,\n              extraContentBorder: hasExtraContentBorder,\n            },\n          ))\"\n      >\n        <slot name=\"frontContent\">\n          <AppIcon v-if=\"frontIcon\" :icon=\"frontIcon\" />\n          <div v-else-if=\"frontContent\">\n            {{ frontContent }}\n          </div>\n        </slot>\n      </div>\n\n      <!-- Input -->\n      <input\n        :id=\"uuid\" v-model=\"model\" :disabled=\"isDisabled\" :type=\"inputType\" min=\"0\"\n        :class=\"twMerge(inputFieldVariants({ status: currentStatus, extraContent: currentExtraContent }))\"\n        :placeholder=\"placeholder\" :readonly=\"isReadOnly\" @blur=\"emits('blur')\"\n      >\n\n      <!-- Content after the input -->\n      <div\n        v-if=\"hasBackContent\" :class=\"\n          twMerge(inputFieldExtraContentVariants(\n            {\n              extraContentType: 'back',\n              status: currentStatus,\n              extraContentBorder: hasExtraContentBorder,\n            },\n          ))\"\n      >\n        <slot name=\"backContent\">\n          <button v-if=\"type === 'password'\" @click=\"togglePasswordShown\">\n            <AppIcon v-if=\"passwordShown\" icon=\"eyeClosed\" />\n            <AppIcon v-else icon=\"eyeOpen\" />\n          </button>\n          <button v-else-if=\"isCopyable\" @click=\"copy(copyModel)\">\n            Copy\n          </button>\n          <AppIcon v-else-if=\"backIcon\" :icon=\"backIcon\" />\n          <div v-else-if=\"backContent\">\n            {{ backContent }}\n          </div>\n        </slot>\n      </div>\n    </div>\n    <!-- Error -->\n    <TransitionExpand :duration=\"0.2\">\n      <FormError v-if=\"errorShown\" :error-message=\"errors._errors[0]\" />\n    </TransitionExpand>\n  </div>\n</template>\n"
      },
      {
        "name": "formInputField.style.ts",
        "dir": "./src/components/form/field",
        "placementDir": "form/field",
        "type": "components",
        "content": "import type { VariantProps } from 'class-variance-authority'\nimport { cva } from 'class-variance-authority'\n\nexport const statusOptions = {\n  default: 'border-border',\n  error: 'border-destructive',\n  success: 'border-success',\n  readonly: 'bg-muted text-muted-foreground',\n  disabled: 'opacity-60',\n}\n\nexport const extraContentOptions = {\n  default: '',\n  back: 'rounded-r-none border-r-0',\n  front: 'rounded-l-none border-l-0',\n  both: 'rounded-l-none border-l-0 rounded-r-none border-r-0',\n}\n\nexport const inputFieldVariants = cva(\n  'relative w-full rounded border border-border bg-input px-4 py-2 placeholder:transition-all placeholder:duration-300 focus:placeholder:translate-x-1 focus:placeholder:opacity-0',\n  {\n    variants: {\n      status: statusOptions,\n      extraContent: extraContentOptions,\n    },\n    defaultVariants: {\n      status: 'default',\n      extraContent: 'default',\n    },\n  },\n)\n\nexport const extraContentTypes = {\n  back: 'rounded-l-none border-l-0',\n  front: 'rounded-r-none border-r-0',\n}\n\nexport const extraContentBorderOptions = {\n  true: '',\n  false: '',\n}\n\nexport const inputFieldExtraContentVariants = cva(\n  'flex items-center justify-center rounded border border-border bg-input px-4',\n  {\n    variants: {\n      status: statusOptions,\n      extraContentType: extraContentTypes,\n      extraContentBorder: extraContentBorderOptions,\n    },\n    compoundVariants: [\n      {\n        extraContentBorder: true,\n        extraContentType: 'front',\n        class: 'border-r',\n      },\n      {\n        extraContentBorder: true,\n        extraContentType: 'back',\n        class: 'border-l',\n      },\n    ],\n    defaultVariants: {\n      extraContentType: 'back',\n    },\n  },\n)\n\nexport type InputFieldProps = VariantProps<typeof inputFieldVariants>\nexport const inputFieldStatusOptions = Object.keys(statusOptions)\n"
      }
    ],
    "internalDependencies": [
      "FormError",
      "FormInputGroupComposable",
      "TransitionExpand",
      "UtilsGenerateUuid"
    ],
    "dependencies": [
      "@vueuse/core"
    ]
  },
  {
    "component": "FormInputGroupComposable",
    "name": "FormInputGroupComposable",
    "files": [
      {
        "name": "useFormInputGroup.ts",
        "dir": "./src/composables/form/group",
        "placementDir": "form/group",
        "type": "composables",
        "content": "import { useFormInputGroupContext } from '@/composables/form/group/useFormInputGroupContext'\nimport type { Option } from '@/composables/form/group/useFormInputGroupContext'\n\nexport interface UseFormInputGroupParams {\n  model: Ref<number | null>\n  isDisabled?: Ref<boolean>\n  uuid: string\n  element: Ref<HTMLElement | undefined>\n}\n\nexport const useFormInputGroup = ({ model, uuid, isDisabled, element }: UseFormInputGroupParams): void => {\n  const context = useFormInputGroupContext()\n  const propsRef = computed(() => ({\n    value: typeof model.value === 'number' ? model.value : 0,\n    disabled: isDisabled?.value,\n  }))\n  const option: Option = ref({ id: uuid, element: element.value, propsRef: propsRef.value }) as Option\n\n  const change = (value: number): void => {\n    if (isDisabled?.value || !context)\n      return\n\n    const newValue = context.change(option, value)\n    model.value = newValue\n  }\n\n  watch(\n    () => model.value, (value) => {\n      if (!value)\n        return\n      change(value)\n    },\n  )\n\n  onMounted(() => {\n    if (context)\n      context.registerOption(option)\n  })\n  onUnmounted(() => {\n    if (context)\n      context.unregisterOption(uuid)\n  })\n}\n"
      },
      {
        "name": "useFormInputGroupContext.ts",
        "dir": "./src/composables/form/group",
        "placementDir": "form/group",
        "type": "composables",
        "content": "import { inject } from 'vue'\nimport type { ComputedRef, InjectionKey, Ref } from 'vue'\n\nexport type Option = Ref<{ id: string; element: HTMLElement | undefined; propsRef: { value: number; disabled: boolean } }>\n\nexport interface FormInputGroupStateDefinition {\n  // State\n  valueMeasurement?: ComputedRef<string>\n  percentProgress?: ComputedRef<boolean>\n  valueProgress?: ComputedRef<boolean>\n  maxLabel?: ComputedRef<boolean>\n\n  options: Ref<Option[]>\n  maxValue: ComputedRef<number | undefined>\n  valueUsed: ComputedRef<number>\n\n  disabled: Ref<boolean>\n  change(option: Option, newValue: number): number | null\n  registerOption(action: Option): void\n  unregisterOption(id: string): void\n}\n\nexport const FormInputGroupContext = Symbol('FormGroupContext') as InjectionKey<FormInputGroupStateDefinition>\n\nexport const useFormInputGroupContext = (): FormInputGroupStateDefinition | null => {\n  const context = inject(FormInputGroupContext, null)\n  return context\n}\n"
      }
    ]
  },
  {
    "component": "UtilsGenerateUuid",
    "name": "GenerateUuid",
    "files": [
      {
        "name": "generateUuid.ts",
        "dir": "./src/utils/uuid",
        "placementDir": "uuid",
        "type": "utils",
        "content": "export function generateUuid(): string { // Public Domain/MIT\n  let d = new Date().getTime()// Timestamp\n  let d2 = ((typeof performance !== 'undefined') && performance.now && (performance.now() * 1000)) || 0// Time in microseconds since page-load or 0 if unsupported\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    let r = Math.random() * 16// random number between 0 and 16\n    if (d > 0) { // Use timestamp until depleted\n      r = (d + r) % 16 | 0\n      d = Math.floor(d / 16)\n    }\n    else { // Use microseconds since page-load if supported\n      r = (d2 + r) % 16 | 0\n      d2 = Math.floor(d2 / 16)\n    }\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16)\n  })\n}\n"
      }
    ]
  },
  {
    "component": "AppModal",
    "name": "Modal",
    "files": [
      {
        "name": "AppModal.vue",
        "dir": "./src/components/app/modal",
        "placementDir": "app/modal",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport {\n  Dialog,\n  DialogPanel,\n  DialogTitle,\n  TransitionChild,\n  TransitionRoot,\n} from '@headlessui/vue'\nimport { twMerge } from 'tailwind-merge'\nimport type { ModalProps } from '@/components/app/modal/appModal.style'\nimport { modalVariants } from '@/components/app/modal/appModal.style'\nimport type { Icon } from '@/icons'\n\ninterface Props {\n  hasNoCloseButton?: boolean\n  hasNoCloseOutside?: boolean\n  size?: ModalProps['size']\n  title?: string\n  icon?: Icon\n}\n\nconst {\n  hasNoCloseButton = false,\n  hasNoCloseOutside = false,\n  size = 'default',\n} = defineProps<Props>()\n\nconst isOpen = defineModel<boolean>('isOpen', {\n  required: true,\n})\n\nconst handleClickOutside = (): void => {\n  if (!hasNoCloseOutside)\n    isOpen.value = false\n}\n\nconst handleClickCloseButton = (): void => {\n  if (!hasNoCloseButton)\n    isOpen.value = false\n}\n</script>\n\n<template>\n  <TransitionRoot appear :show=\"isOpen\" as=\"template\">\n    <Dialog as=\"div\" class=\"relative z-[999]\" @close=\"handleClickOutside\">\n      <TransitionChild\n        as=\"template\"\n        class=\"ease-[cubic-bezier(.8,_.16,_0,_1.3)]\"\n        enter=\"duration-300 ease-out \"\n        enter-from=\"opacity-0\"\n        enter-to=\"opacity-100\"\n        leave=\"duration-200 ease-in\"\n        leave-from=\"opacity-100\"\n        leave-to=\"opacity-0\"\n      >\n        <div class=\"fixed inset-0 bg-black/25\" />\n      </TransitionChild>\n\n      <div class=\"fixed inset-0 flex min-h-full items-center justify-center overflow-y-auto p-4\">\n        <TransitionChild\n          as=\"template\"\n          class=\"ease-[cubic-bezier(.8,_.16,_0,_1.3)]\"\n          enter=\"duration-300 ease-out \"\n          enter-from=\"opacity-0 scale-0\"\n          enter-to=\"opacity-100 scale-100\"\n          leave=\"duration-200 ease-in\"\n          leave-from=\"opacity-100 scale-100\"\n          leave-to=\"opacity-0 scale-0\"\n        >\n          <DialogPanel :class=\"twMerge(modalVariants({ size }))\">\n            <div class=\"flex justify-between gap-4\">\n              <DialogTitle class=\"flex flex-col items-start justify-start gap-8\">\n                <slot name=\"icon\">\n                  <AppButton v-if=\"icon\" :front-icon=\"icon\" size=\"icon\" variant=\"outline\" is-rounded />\n                </slot>\n                <slot name=\"title\">\n                  <AppText variant=\"heading\">\n                    {{ title }}\n                  </AppText>\n                </slot>\n              </DialogTitle>\n              <button class=\"flex \">\n                <AppIcon v-if=\"!hasNoCloseButton\" icon=\"close\" @click=\"handleClickCloseButton\" />\n              </button>\n            </div>\n\n            <div>\n              <slot name=\"content\" />\n            </div>\n\n            <div class=\"mt-4\">\n              <slot name=\"footer\" />\n            </div>\n          </DialogPanel>\n        </TransitionChild>\n      </div>\n    </Dialog>\n  </TransitionRoot>\n</template>\n"
      },
      {
        "name": "appModal.style.ts",
        "dir": "./src/components/app/modal",
        "placementDir": "app/modal",
        "type": "components",
        "content": "import type { VariantProps } from 'class-variance-authority'\nimport { cva } from 'class-variance-authority'\n\nexport const sizeOptions = {\n  default: 'w-[80ch] ',\n  sm: 'w-[60ch]',\n  full: 'w-full',\n  lg: 'w-[120ch]',\n}\n\nexport const loaderVariantOptions = {\n  white: 'bg-white',\n  primary: 'bg-primary',\n}\n\nexport const modalVariants = cva(\n  'flex flex-col gap-4 rounded-modal bg-white p-6 text-left',\n  {\n    variants: {\n      size: sizeOptions,\n    },\n    defaultVariants: {\n      size: 'default',\n    },\n  },\n)\n\nexport type ModalProps = VariantProps<typeof modalVariants>\nexport const modalSizeOptions = Object.keys(sizeOptions)\n"
      }
    ],
    "dependencies": [
      "@headlessui/vue"
    ],
    "internalDependencies": [
      "AppText",
      "AppButton",
      "AppIcon"
    ]
  },
  {
    "component": "AppText",
    "name": "Text",
    "files": [
      {
        "name": "AppText.vue",
        "dir": "./src/components/app/text",
        "placementDir": "app/text",
        "type": "components",
        "content": "<script setup lang=\"ts\">\nimport { twMerge } from 'tailwind-merge'\nimport { textVariants } from '@/components/app/text/appText.style'\nimport type { TextProps } from '@/components/app/text/appText.style'\n\ntype TextType = 'p' | 'span' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'div' | 'blockquote'\n\ninterface Props {\n  variant?: TextProps['variant']\n  boldness?: TextProps['boldness']\n  numberOfLines?: TextProps['truncate']\n  as?: TextType\n}\n\nconst {\n  variant = 'p',\n  numberOfLines,\n  boldness,\n  as = 'p',\n} = defineProps<Props>()\n\nconst attrs = useAttrs()\n</script>\n\n<template>\n  <Component :is=\"as\" :class=\"twMerge(textVariants({ variant, boldness, truncate: numberOfLines }), attrs?.class as string)\">\n    <slot />\n  </Component>\n</template>\n"
      },
      {
        "name": "appText.style.ts",
        "dir": "./src/components/app/text",
        "placementDir": "app/text",
        "type": "components",
        "content": "import type { VariantProps } from 'class-variance-authority'\nimport { cva } from 'class-variance-authority'\n\nexport const variantOptions = {\n  hero: 'text-hero',\n  title: 'text-title',\n  subtitle: 'text-subtitle',\n  heading: 'text-heading',\n  body: 'text-body',\n  subtext: 'text-subtext',\n  caption: 'text-caption',\n}\n\nexport const boldnessOptions = {\n  bold: 'font-bold',\n  normal: 'font-normal',\n  light: 'font-light',\n  thin: 'font-thin',\n  extrabold: 'font-extrabold',\n  semibold: 'font-semibold',\n  none: '',\n}\n\nexport const truncateOptions = {\n  1: 'line-clamp-1',\n  2: 'line-clamp-2',\n  3: 'line-clamp-3',\n  4: 'line-clamp-4',\n  5: 'line-clamp-5',\n  6: 'line-clamp-6',\n}\n\nexport const textVariants = cva(\n  '',\n  {\n    variants: {\n      variant: variantOptions,\n      boldness: boldnessOptions,\n      truncate: truncateOptions,\n    },\n    defaultVariants: {\n      variant: 'body',\n      boldness: 'none',\n      truncate: undefined,\n    },\n  },\n)\n\nexport type TextProps = VariantProps<typeof textVariants>\n\nexport const textVariantOptions = Object.keys(variantOptions)\nexport const textBoldnessOptions = Object.keys(boldnessOptions)\nexport const textTruncateOptions = Object.keys(truncateOptions)\n"
      }
    ],
    "internalDependencies": []
  },
  {
    "component": "AppRadioGroup",
    "name": "Text",
    "files": [
      {
        "name": "AppRadioGroup.vue",
        "dir": "./src/components/app/radio",
        "placementDir": "app/radio",
        "type": "components",
        "content": "<!-- eslint-disable vue/valid-v-model -->\n<script setup lang=\"ts\" generic=\"T, TValue extends keyof T\">\nimport {\n  RadioGroup,\n  RadioGroupLabel,\n  RadioGroupOption,\n} from '@headlessui/vue'\nimport type { RadioProps } from './appRadio.style'\nimport AppRadioOption from './AppRadioOption.vue'\n\ninterface Props {\n  isDisabled?: boolean\n  options: Array<T>\n  optionLabel?: TValue\n  optionValue?: TValue\n  optionDescription?: TValue\n  optionDisabled?: TValue\n  variant?: RadioProps['variant']\n}\n\nconst {\n  isDisabled = false,\n  options = [],\n  variant = 'default',\n} = defineProps<Props>()\n\nconst model = defineModel<T[keyof T]>()\n</script>\n\n<template>\n  <!-- eslint-disable-next-line vue/valid-v-model -->\n  <RadioGroup v-model=\"(model as any)\" :disabled=\"isDisabled\" class=\"flex flex-col gap-3\">\n    <RadioGroupLabel>\n      <slot name=\"label\" />\n    </RadioGroupLabel>\n\n    <slot\n      name=\"group\"\n      :group-disabled=\"isDisabled\"\n      :variant=\"variant\"\n      :options=\"options\"\n    >\n      <div class=\"flex flex-col gap-6\">\n        <RadioGroupOption\n          v-for=\"(option, index) in options\"\n          :key=\"`${index}`\"\n          v-slot=\"{ active, checked, disabled }\"\n          :value=\"(option as any)[optionValue]\"\n          class=\"outline-none\"\n          :disabled=\"(option as any)[optionDisabled]\"\n        >\n          <slot\n            name=\"item\"\n            :active=\"active\"\n            :checked=\"checked\"\n            :disabled=\"disabled\"\n            :option=\"option\"\n          >\n            <AppRadioOption\n              v-bind=\"{\n                option: option as any,\n                optionLabel,\n                optionValue,\n                optionDescription,\n                optionDisabled,\n                variant,\n                checked,\n                active,\n                disabled,\n              }\"\n            />\n          </slot>\n        </RadioGroupOption>\n      </div>\n    </slot>\n  </RadioGroup>\n</template>\n"
      },
      {
        "name": "AppRadioOption.vue",
        "dir": "./src/components/app/radio",
        "placementDir": "app/radio",
        "type": "components",
        "content": "<!-- eslint-disable vue/valid-v-model -->\n<script setup lang=\"ts\" generic=\"T, TValue extends T\">\nimport {\n  RadioGroupDescription,\n  RadioGroupLabel,\n} from '@headlessui/vue'\nimport { twMerge } from 'tailwind-merge'\nimport type { RadioProps } from './appRadio.style'\nimport { radioButtonVariants, radioVariants } from './appRadio.style'\n\ninterface Props {\n  option: T\n  optionLabel?: TValue\n  optionValue?: TValue\n  optionDescription?: TValue\n  optionDisabled?: TValue\n  variant?: RadioProps['variant']\n  checked: boolean\n  active: boolean\n  disabled: boolean\n}\n\nconst {\n  option = {},\n  variant = 'default',\n} = defineProps<Props>()\n</script>\n\n<template>\n  <div\n    :class=\"twMerge(radioVariants({ variant, isChecked: checked, isActive: active, isDisabled: disabled }))\"\n  >\n    <div>\n      <RadioGroupLabel class=\"text-body font-medium\">\n        {{ (option as any)[optionLabel] }}\n      </RadioGroupLabel>\n\n      <RadioGroupDescription class=\"text-subtext\">\n        {{ (option as any)[optionDescription] }}\n      </RadioGroupDescription>\n    </div>\n\n    <div\n      :class=\"twMerge(radioButtonVariants({ isChecked: checked, isActive: active && !checked }))\"\n    >\n      <!-- TODO: Update svg once AppIcon is merged -->\n      <svg class=\"h-6 w-6\" viewBox=\"0 0 24 24\" fill=\"none\">\n        <circle\n          cx=\"12\"\n          cy=\"12\"\n          r=\"12\"\n          fill=\"currentColor\"\n          fill-opacity=\"0.2\"\n        />\n        <path\n          d=\"M7 13l3 3 7-7\"\n          stroke=\"currentColor\"\n          stroke-width=\"1.5\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n        />\n      </svg>\n    </div>\n  </div>\n</template>\n"
      },
      {
        "name": "appRadio.style.ts",
        "dir": "./src/components/app/radio",
        "placementDir": "app/radio",
        "type": "components",
        "content": "import type { VariantProps } from 'class-variance-authority'\nimport { cva } from 'class-variance-authority'\n\nexport const variantOptions = {\n  default: 'bg-background text-foreground hover:bg-secondary border-border',\n  secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80 border-transparent',\n  ghost: 'hover:bg-secondary text-foreground border-transparent',\n}\n\nexport const radioVariants = cva(\n  'relative flex cursor-pointer items-center justify-between gap-6 rounded border-2 px-5 py-4 transition focus:outline-none',\n  {\n    variants: {\n      variant: variantOptions,\n      isChecked: {\n        true: 'border-primary',\n        false: '',\n      },\n      isActive: {\n        true: 'border-primary',\n        false: '',\n      },\n      isDisabled: {\n        true: 'pointer-events-none opacity-50',\n        false: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\nexport const radioButtonVariants = cva(\n  'rounded-full border-2 border-border bg-transparent text-transparent',\n  {\n    variants: {\n      isChecked: {\n        true: 'border-primary bg-primary text-white',\n        false: '',\n      },\n      isActive: {\n        true: 'border-primary bg-primary/10 text-transparent',\n        false: '',\n      },\n    },\n  },\n)\n\nexport type RadioProps = VariantProps<typeof radioVariants>\n\nexport const radioVariantOptions = Object.keys(variantOptions)\n"
      }
    ],
    "dependencies": [
      "@headlessui/vue"
    ],
    "internalDependencies": []
  },
  {
    "component": "TransitionExpand",
    "name": "TransitionExpand",
    "files": [
      {
        "name": "TransitionExpand.vue",
        "dir": "./src/components/app/transitions",
        "placementDir": "transitions",
        "type": "components",
        "content": "<script lang=\"ts\" setup>\ninterface Props {\n  duration?: number\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  duration: 0.5,\n})\n\nconst durationString = computed(() => `${props.duration}s`)\n\nconst enter = (element: Element): void => {\n  const htmlElement: HTMLElement = element as HTMLElement\n  const width = getComputedStyle(htmlElement).width\n\n  htmlElement.style.width = width\n  htmlElement.style.position = 'absolute'\n  htmlElement.style.visibility = 'hidden'\n  htmlElement.style.height = 'auto'\n\n  const height = getComputedStyle(htmlElement).height\n\n  htmlElement.style.width = ''\n  htmlElement.style.position = ''\n  htmlElement.style.visibility = ''\n  htmlElement.style.height = ''\n\n  getComputedStyle(htmlElement)\n\n  requestAnimationFrame(() => {\n    htmlElement.style.height = height\n  })\n}\n\nconst afterEnter = (element: Element): void => {\n  const htmlElement: HTMLElement = element as HTMLElement\n  htmlElement.style.height = 'auto'\n}\n\nconst leave = (element: Element): void => {\n  const htmlElement: HTMLElement = element as HTMLElement\n  const height = getComputedStyle(htmlElement).height\n\n  htmlElement.style.height = height\n  getComputedStyle(htmlElement)\n\n  requestAnimationFrame(() => {\n    htmlElement.style.height = '0'\n  })\n}\n</script>\n\n<template>\n  <transition\n    name=\"expand\"\n    @after-enter=\"afterEnter\"\n    @enter=\"enter\"\n    @leave=\"leave\"\n  >\n    <slot />\n  </transition>\n</template>\n\n<style scoped>\n.expand-enter-active,\n.expand-leave-active {\n  transition: height v-bind(durationString) cubic-bezier(0.645, 0.045, 0.355, 1), opacity v-bind(durationString);\n  overflow: hidden;\n}\n\n.expand-enter-from,\n.expand-leave-to {\n  opacity: 0;\n  height: 0;\n}\n\n* {\n  will-change: height;\n  transform: translateZ(0);\n  backface-visibility: hidden;\n}\n</style>\n"
      }
    ]
  }
]